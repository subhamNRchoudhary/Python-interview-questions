# -*- coding: utf-8 -*-
"""Top 5 Asked Question.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nGNWRE_3MeYGwTRshUZTg3-I-OQlaA6R

DataFrame Operations and Manipulation

Code: How would you filter a DataFrame to include only rows where the value in a column 'A' is greater than 50?
Theory: Explain the use of loc and iloc in pandas.
"""

import pandas as pd

data = {'A': [10, 20, 60, 70], 'B': [1, 2, 3, 4]}
df = pd.DataFrame(data)

filtered_df = df[df['A'] > 50]

print(filtered_df)

"""Theory: loc is used for label-based indexing, while iloc is used for integer-based indexing. loc allows selection by row and column labels, and iloc allows selection by row and column positions.

Handling Missing Data
"""

import pandas as pd
import numpy as np

data = {
    'A': [1, 2, np.nan, 4],
    'B': [np.nan, 2, 3, 4],
    'C': [1, 2, 3, np.nan]
}
df = pd.DataFrame(data)

# drop
df_dropped = df.dropna()

# Fill missing values
df_filled = df.fillna(0)

# Fill missing values using forward fill
df_ffill = df.fillna(method='ffill')

print("Original DataFrame:")
print(df)
print("\nDataFrame with rows dropped:")
print(df_dropped)
print("\nDataFrame with missing values filled with 0:")
print(df_filled)
print("\nDataFrame with forward fill:")
print(df_ffill)

""" GroupBy and Aggregation"""

data = {
    'Category': ['A', 'B', 'A', 'B', 'A'],
    'Value': [10, 20, 30, 40, 50]
}
df = pd.DataFrame(data)

# Group by 'Category' and calculate the sum of 'Value'
grouped = df.groupby('Category').agg({'Value': 'sum'})

print("Grouped DataFrame with Sum Aggregation:")
print(grouped)

"""Merging DataFrames"""

df1 = pd.DataFrame({
    'ID': [1, 2, 3],
    'Name': ['Alice', 'Bob', 'Charlie']
})

df2 = pd.DataFrame({
    'ID': [1, 2, 4],
    'Score': [85, 90, 75]
})

# Merge DataFrames on 'ID'
merged_df = pd.merge(df1, df2, on='ID', how='inner')  # 'inner' join by default

print("Merged DataFrame:")
print(merged_df)

"""***Pivot Tables***"""

data = {
    'Date': ['2024-01-01', '2024-01-02', '2024-01-01', '2024-01-02'],
    'Product': ['A', 'A', 'B', 'B'],
    'Sales': [100, 200, 150, 250]
}
df = pd.DataFrame(data)

# Create a pivot table
pivot_table = pd.pivot_table(df, values='Sales', index='Date', columns='Product', aggfunc='sum')

print("Pivot Table:")
print(pivot_table)